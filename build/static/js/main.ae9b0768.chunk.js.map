{"version":3,"sources":["assets/twitter-logo.svg","assets/solana-sol.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","onInputChange","event","value","target","getProvider","connection","Connection","Provider","createGifAccount","provider","program","Program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","sendGif","length","addGif","account","fetch","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","solanaLogo","userAddress","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae9b0768.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","export default __webpack_public_path__ + \"static/media/solana-sol.19b20fe8.svg\";","import React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport solanaLogo from \"./assets/solana-sol.svg\";\nimport \"./App.css\";\nimport kp from \"./keypair.json\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport { MdThumbDown, MdThumbUp } from \"react-icons/md\";\nimport idl from \"./idl.json\";\n\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Fetch the keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl(\"devnet\");\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\nconst TEST_GIFS = [\n  \"https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp\",\n  \"https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g\",\n  \"https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g\",\n  \"https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp\",\n];\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found\");\n          /*\n           * The solana object gives us a function that will allow us to connect\n           * directly with the user's wallet!\n           */\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public key:\",\n            response.publicKey.toString()\n          );\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\");\n      return;\n    }\n    setInputValue(\"\");\n    console.log(\"Gif link:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue);\n\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n    if (inputValue.length > 0) {\n      console.log(\"Gif link:\", inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue(\"\");\n    } else {\n      console.log(\"Empty input. Try again.\");\n    }\n  };\n\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connet to a Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    } else {\n      // Otherwise, we're good! Account exists. User can submit GIFs\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                \n\n                <img src={item.gifLink} />\n                <p className=\"address\">\n                  {\" \"}\n                  <img\n                    alt=\"Solana Logo\"\n                    className=\"solana-logo\"\n                    src={solanaLogo}\n                  />{\" \"}\n                  {item.userAddress.toString()}\n                </p>\n                {/* <div className=\"vote\">\n                  <MdThumbUp className=\"vote-button\" onClick=\"upvote\" />\n                  <span className=\"vote-count\">3</span>\n                  <MdThumbDown className=\"vote-button\" onClick=\"downvote\" />\n                </div> */}\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ GIF Portal</p>\n          <p className=\"sub-text\">\n            View your GIF collection in the metaverse âœ¨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}